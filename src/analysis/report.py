"""HTML reporting utilities for assembling analysis reports."""
from __future__ import annotations

from typing import Any, Callable, Iterable, List

import pandas as pd

from . import plots, tabulation
from .utils import fig_to_base64_png


class ModelAnalysisReport:
    """Flexible builder for model analysis reports."""

    def __init__(
        self,
        df: pd.DataFrame,
        actual_col: str,
        predicted_col: str,
        *,
        split_col: str = "split",
        exposure_col: str | None = None,
        title: str | None = None,
    ) -> None:
        self.df = df.copy()
        self.actual_col = actual_col
        self.predicted_col = predicted_col
        self.split_col = split_col
        self.exposure_col = exposure_col
        self.title = title
        self._sections: List[str] = []

    # ------------------------------------------------------------------
    def add_plot(self, plot_func: Callable[..., Any], heading: str, **kwargs: Any) -> None:
        """Add a section generated by ``plot_func`` for each data split."""
        html = f"<h2>{heading}</h2><div style='display:flex;flex-wrap:wrap'>"
        for split_value in self.df[self.split_col].unique():
            df_split = self.df[self.df[self.split_col] == split_value].copy()
            fig = plot_func(
                df=df_split,
                actual_col=self.actual_col,
                predicted_col=self.predicted_col,
                exposure_col=self.exposure_col,
                split_name=split_value,
                title=self.title,
                **kwargs,
            )
            html += f"<div style='margin:10px'><h4>{split_value} Split</h4>{fig_to_base64_png(fig)}</div>"
        html += "</div>"
        self._sections.append(html)

    def add_tabulation(self, variables: Iterable[str], **kwargs: Any) -> None:
        """Add a tabulation section for ``variables``."""
        html = "<h2>Tabulations</h2>"
        html += tabulation.generate_tabulations_html(
            self.df,
            prediction_col=self.predicted_col,
            truth_col=self.actual_col,
            group_vars=list(variables),
            split_col=self.split_col,
            weights_col=self.exposure_col,
            **kwargs,
        )
        self._sections.append(html)

    def save(self, output_html: str = "model_analysis.html") -> None:
        """Write the assembled report to ``output_html``."""
        html_output = "<html><head><title>Model Analysis Report</title></head><body>"
        html_output += "<h1>Model Analysis Report</h1>"
        html_output += "".join(self._sections)
        html_output += "</body></html>"
        with open(output_html, "w") as f:
            f.write(html_output)
        print(f"âœ… Analysis report generated at {output_html}")


# ----------------------------------------------------------------------
# Backwards compatible function

def generate_model_analysis_report(
    df: pd.DataFrame,
    actual_col: str,
    predicted_col: str,
    split_col: str = "split",
    exposure_col: str | None = None,
    output_html: str = "model_analysis.html",
    gain_kwargs: dict[str, Any] | None = None,
    lift_kwargs: dict[str, Any] | None = None,
    residual_kwargs: dict[str, Any] | None = None,
    residual_fit_kwargs: dict[str, Any] | None = None,
    error_group_cols: Iterable[str] | None = None,
    tabulation_vars: Iterable[str] | None = None,
    title: str | None = None,
) -> None:
    """Generate a full HTML model analysis report using :class:`ModelAnalysisReport`."""
    gain_kwargs = gain_kwargs or {}
    lift_kwargs = lift_kwargs or {}
    residual_kwargs = residual_kwargs or {}
    residual_fit_kwargs = residual_fit_kwargs or {}

    report = ModelAnalysisReport(
        df,
        actual_col,
        predicted_col,
        split_col=split_col,
        exposure_col=exposure_col,
        title=title,
    )

    report.add_plot(plots.gain_curve_with_gini, "Gain Curve / Lorenz Curve with Gini", **gain_kwargs)
    report.add_plot(plots.lift_chart, "Lift Charts", **lift_kwargs)
    report.add_plot(plots.crunched_residual_plot, "Crunched Residual Plots", **residual_kwargs)
    report.add_plot(plots.plot_residual_fit, "Avg. and Std. of Deviance Residuals Plots", **residual_fit_kwargs)

    if error_group_cols:
        report.add_plot(
            lambda d, a, p, e, split_name=None, title=None, **k: plots.plot_error_by_group_grid(
                d, a, p, error_group_cols, **k
            ),
            "Error by Group",
        )

    if tabulation_vars:
        report.add_tabulation(tabulation_vars)

    report.save(output_html)
